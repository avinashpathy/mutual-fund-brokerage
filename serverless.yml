service: mutual-fund-brokerage

frameworkVersion: '3'

custom:
  webpack:
    webpackConfig: './webpack.config.js'
  env: ${env:ENVIRONMENT, 'dev'}
  region: ${opt:REGION, 'us-east-1'}
  accountId: ${env:AWS_ACCOUNT_ID, aws:accountId}
  postfixes:
    dev: '-dev'
    uat: '-uat'
    prod: ''
  postfix: ${self:custom.postfixes.${self:custom.env}}

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${self:custom.env}
  region: ${self:custom.region}
  environment: ${file(./config/sls.environments.yml):${self:custom.env}}
  stackName: ${self:service}${self:custom.postfix}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/users-table
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/mutual-fund-tracking-table
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/portfolio-table
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/portfolio-update-table
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:aws:secretsmanager:${self:provider.region}:${self:custom.accountId}:secret:dev/auth/jwt*

plugins:
  - serverless-webpack

package:
  individually: true

functions:
  RegisterHandler:
    handler: src/functions/RegisterHandler/index.handler
    name: RegisterHandler${self:custom.postfix}
    events:
      - http:
          path: /register
          method: post
          cors: true
    timeout: 60

  LoginHandler:
    handler: src/functions/LoginHandler/index.handler
    name: LoginHandler${self:custom.postfix}
    events:
      - http:
          path: /login
          method: post
          cors: true
    timeout: 60

  AuthHandler:
    handler: src/functions/AuthHandler/index.handler
    name: AuthHandler${self:custom.postfix}
    timeout: 60

  MutualFundHandler:
    handler: src/functions/MutualFundHandler/index.handler
    events:
      - http:
          path: /mutual-funds
          method: get
          cors: true
          authorizer:
            name: AuthHandler
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 300 

  PortfolioHandler:
    handler: src/functions/PortfolioHandler/index.handler
    events:
      - http:
          path: /portfolio
          method: get
          cors: true
          authorizer:
            name: AuthHandler
            type: token
            identitySource: method.request.header.Authorization
      - http:
          path: /portfolio
          method: post
          cors: true
          authorizer:
            name: AuthHandler
            type: token
            identitySource: method.request.header.Authorization
      - http:
          path: /portfolio
          method: delete
          cors: true
          authorizer:
            name: AuthHandler
            type: token
            identitySource: method.request.header.Authorization

  UpdateNavsHandler:
    handler: src/functions/UpdateNavsHandler/index.handler
    events:
      - schedule: rate(1 hour)

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-table
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PortfolioTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: portfolio-table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fundId
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fundId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    FundTrackingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: mutual-fund-tracking-table
        AttributeDefinitions:
          - AttributeName: fundId
            AttributeType: N
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: fundId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: LastUpdatedIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    PortfolioValueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: portfolio-update-table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
  